2023-07-27T03:39:21.2166605Z (dda,BL9_100monres)=>
2023-07-27T03:39:21.2167318Z (dda,BL9_100monres)=>03:39:18.625 INFO : Randomness seeded to: 1690429158
2023-07-27T03:39:21.2167954Z (dda,BL9_100monres)=>03:39:18.625 WARNING : opendir [lang/mo/] failed with "No such file or directory".
2023-07-27T03:39:21.2169063Z (dda,BL9_100monres)=>03:39:18.627 INFO : SDL render devices: software, opengl, opengles2
2023-07-27T03:39:21.2169636Z (dda,BL9_100monres)=>03:39:18.628 INFO : [options] C locale set to C
2023-07-27T03:39:21.2170162Z (dda,BL9_100monres)=>03:39:18.628 INFO : [options] C++ locale set to C
2023-07-27T03:39:21.2170697Z (dda,BL9_100monres)=>03:39:20.881 ERROR : (error message will follow backtrace)
2023-07-27T03:39:21.2171389Z (dda,BL9_100monres)=>    ./tests/cata_test(debug_write_backtrace(std::ostream&)+0x23) [0x1f6a756]
2023-07-27T03:39:21.2172099Z (dda,BL9_100monres)=>    ./tests/cata_test(DebugLog(DebugLevel, DebugClass)+0x278) [0x1f69ce4]
2023-07-27T03:39:21.2173053Z (dda,BL9_100monres)=>    ./tests/cata_test(realDebugmsg(char const*, char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa0) [0x1f695be]
2023-07-27T03:39:21.2174109Z (dda,BL9_100monres)=>    ./tests/cata_test(mtype::add_special_attack(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xfa) [0x26a378a]
2023-07-27T03:39:21.2175277Z (dda,BL9_100monres)=>    ./tests/cata_test(mtype::add_special_attacks(JsonObject const&, std::basic_string_view<char, std::char_traits<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x155) [0x26a1ee1]
2023-07-27T03:39:21.2176381Z (dda,BL9_100monres)=>    ./tests/cata_test(mtype::load(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3aa8) [0x269e06e]
2023-07-27T03:39:21.2177414Z (dda,BL9_100monres)=>    ./tests/cata_test(generic_factory<mtype>::load(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x119) [0x26a67db]
2023-07-27T03:39:21.2178734Z (dda,BL9_100monres)=>    ./tests/cata_test(DynamicDataLoader::load_object(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cata_path const&, cata_path const&)+0xae) [0x21c4018]
2023-07-27T03:39:21.2180144Z (dda,BL9_100monres)=>    ./tests/cata_test(DynamicDataLoader::load_all_from_json(JsonValue const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, loading_ui&, cata_path const&, cata_path const&)+0xdf) [0x21c4c7d]
2023-07-27T03:39:21.2181381Z (dda,BL9_100monres)=>    ./tests/cata_test(DynamicDataLoader::load_data_from_path(cata_path const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, loading_ui&)+0x130) [0x21c4a88]
2023-07-27T03:39:21.2182816Z (dda,BL9_100monres)=>    ./tests/cata_test(game::load_packs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<string_id<MOD_INFORMATION>, std::allocator<string_id<MOD_INFORMATION> > > const&, loading_ui&)+0x166) [0x20b6c4a]
2023-07-27T03:39:21.2183771Z (dda,BL9_100monres)=>    ./tests/cata_test(game::load_world_modfiles(loading_ui&)+0x2f8) [0x20a480c]
2023-07-27T03:39:21.2184396Z (dda,BL9_100monres)=>    ./tests/cata_test(main+0xf9b) [0x1b318d6]
2023-07-27T03:39:21.2185341Z (dda,BL9_100monres)=>    /lib/x86_64-linux-gnu/libc.so.6(+0x29d90) [0x7f93f4a22d90]
2023-07-27T03:39:21.2186138Z (dda,BL9_100monres)=>    /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0x80) [0x7f93f4a22e40]
2023-07-27T03:39:21.2186742Z (dda,BL9_100monres)=>    ./tests/cata_test(_start+0x25) [0x15017a5]
2023-07-27T03:39:21.2187168Z (dda,BL9_100monres)=>
2023-07-27T03:39:21.2187812Z (dda,BL9_100monres)=>    Attempting to repeat stack trace using debug symbolsâ€¦
2023-07-27T03:39:21.2188429Z (dda,BL9_100monres)=>    debug_write_backtrace(std::ostream&)
2023-07-27T03:39:21.2188899Z (dda,BL9_100monres)=>    ??:?
2023-07-27T03:39:21.2189426Z (dda,BL9_100monres)=>    DebugLog(DebugLevel, DebugClass)
2023-07-27T03:39:21.2189909Z (dda,BL9_100monres)=>    ??:?
2023-07-27T03:39:21.2190639Z (dda,BL9_100monres)=>    realDebugmsg(char const*, char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-07-27T03:39:21.2191620Z (dda,BL9_100monres)=>    ??:?
2023-07-27T03:39:21.2192363Z (dda,BL9_100monres)=>    mtype::add_special_attack(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-07-27T03:39:21.2192980Z (dda,BL9_100monres)=>    ??:?
2023-07-27T03:39:21.2193789Z (dda,BL9_100monres)=>    mtype::add_special_attacks(JsonObject const&, std::basic_string_view<char, std::char_traits<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-07-27T03:39:21.2194451Z (dda,BL9_100monres)=>    ??:?
2023-07-27T03:39:21.3294166Z (dda,BL9_100monres)=>    mtype::load(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-07-27T03:39:21.3295046Z (dda,BL9_100monres)=>    ??:?
2023-07-27T03:39:21.3295794Z (dda,BL9_100monres)=>    generic_factory<mtype>::load(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-07-27T03:39:21.3296467Z (dda,BL9_100monres)=>    ??:?
2023-07-27T03:39:21.3297322Z (dda,BL9_100monres)=>    DynamicDataLoader::load_object(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cata_path const&, cata_path const&)
2023-07-27T03:39:21.3298137Z (dda,BL9_100monres)=>    ??:?
2023-07-27T03:39:21.3299007Z (dda,BL9_100monres)=>    DynamicDataLoader::load_all_from_json(JsonValue const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, loading_ui&, cata_path const&, cata_path const&)
2023-07-27T03:39:21.3299688Z (dda,BL9_100monres)=>    ??:?
2023-07-27T03:39:21.3300532Z (dda,BL9_100monres)=>    DynamicDataLoader::load_data_from_path(cata_path const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, loading_ui&)
2023-07-27T03:39:21.3301188Z (dda,BL9_100monres)=>    ??:?
2023-07-27T03:39:21.3302772Z (dda,BL9_100monres)=>    game::load_packs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<string_id<MOD_INFORMATION>, std::allocator<string_id<MOD_INFORMATION> > > const&, loading_ui&)
2023-07-27T03:39:21.3303576Z (dda,BL9_100monres)=>    ??:?
2023-07-27T03:39:21.3304093Z (dda,BL9_100monres)=>    game::load_world_modfiles(loading_ui&)
2023-07-27T03:39:21.3304584Z (dda,BL9_100monres)=>    ??:?
2023-07-27T03:39:21.3304988Z (dda,BL9_100monres)=>    main
2023-07-27T03:39:21.3305418Z (dda,BL9_100monres)=>    ??:?
2023-07-27T03:39:21.3305833Z (dda,BL9_100monres)=>    ??
2023-07-27T03:39:21.3306272Z (dda,BL9_100monres)=>    ??:0
2023-07-27T03:39:21.3306685Z (dda,BL9_100monres)=>    ??
2023-07-27T03:39:21.3307120Z (dda,BL9_100monres)=>    ??:0
2023-07-27T03:39:21.3307517Z (dda,BL9_100monres)=>    _start
2023-07-27T03:39:21.3307943Z (dda,BL9_100monres)=>    ??:?
2023-07-27T03:39:21.3308381Z (dda,BL9_100monres)=>Backtrace emission took 1 seconds.
2023-07-27T03:39:21.3309763Z (dda,BL9_100monres)=>(continued from above) ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_inhrav_4 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:21.3311481Z (dda,BL9_100monres)=>03:39:21.325 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_inhrav_5 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:21.3312656Z (dda,BL9_100monres)=>03:39:21.326 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_yengn_4 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:21.3313795Z (dda,BL9_100monres)=>03:39:21.326 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_yengn_5 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:21.3315210Z (dda,BL9_100monres)=>03:39:21.326 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_ulniv_4 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:21.3316349Z (dda,BL9_100monres)=>03:39:21.326 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_ulniv_5 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:21.3317484Z (dda,BL9_100monres)=>03:39:21.326 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_ezron_4 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:21.3318628Z (dda,BL9_100monres)=>03:39:21.327 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_ezron_5 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:21.3319757Z (dda,BL9_100monres)=>03:39:21.327 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_tavrav_5 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:21.3372448Z (dda,BL9_100monres)=>03:39:21.329 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_argan_6 specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-27T03:39:21.3373722Z (dda,BL9_100monres)=>03:39:21.329 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_wanzel_6 specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-27T03:39:21.3375162Z (dda,BL9_100monres)=>03:39:21.330 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_davran_6 specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-27T03:39:21.3376449Z (dda,BL9_100monres)=>03:39:21.330 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_salden_6 specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-27T03:39:21.3377672Z (dda,BL9_100monres)=>03:39:21.332 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_mutant_2 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:21.3378934Z (dda,BL9_100monres)=>03:39:21.333 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_mutant_evo_2 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:21.3380336Z (dda,BL9_100monres)=>03:39:21.336 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_assassin specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:21.3381502Z (dda,BL9_100monres)=>03:39:21.336 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_assassin specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:21.3383255Z (dda,BL9_100monres)=>03:39:21.336 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_twisted_one specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:21.3383961Z (dda,BL9_100monres)=>[ Previous repeated 2 times ]
2023-07-27T03:39:21.3384784Z (dda,BL9_100monres)=>03:39:21.336 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_twisted_one specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:21.3386041Z (dda,BL9_100monres)=>03:39:21.336 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_inhrav_6 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:21.3387117Z (dda,BL9_100monres)=>03:39:21.336 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_yengn_6 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:21.3388151Z (dda,BL9_100monres)=>03:39:21.337 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_ulniv_6 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:21.3389221Z (dda,BL9_100monres)=>03:39:21.337 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_ezron_6 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:21.3390295Z (dda,BL9_100monres)=>03:39:21.337 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_1 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:21.3390958Z (dda,BL9_100monres)=>[ Previous repeated 2 times ]
2023-07-27T03:39:21.3391774Z (dda,BL9_100monres)=>03:39:21.337 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_1 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:28.8073498Z (dda,BL9_100monres)=>03:39:21.337 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_regen specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:28.8075915Z (dda,BL9_100monres)=>03:39:21.337 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_regen_spiky specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:28.8078359Z (dda,BL9_100monres)=>03:39:21.337 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_regen_spiky specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:28.8079670Z (dda,BL9_100monres)=>03:39:21.337 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_vile_one specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:28.8080965Z (dda,BL9_100monres)=>03:39:21.338 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_2 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:28.8081747Z (dda,BL9_100monres)=>[ Previous repeated 2 times ]
2023-07-27T03:39:28.8082733Z (dda,BL9_100monres)=>03:39:21.338 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_2 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:28.8084021Z (dda,BL9_100monres)=>03:39:21.338 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_3 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:28.8084819Z (dda,BL9_100monres)=>[ Previous repeated 2 times ]
2023-07-27T03:39:28.8086073Z (dda,BL9_100monres)=>03:39:21.338 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_3 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:28.8087337Z (dda,BL9_100monres)=>03:39:21.338 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_4 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:28.8088125Z (dda,BL9_100monres)=>[ Previous repeated 2 times ]
2023-07-27T03:39:28.8089089Z (dda,BL9_100monres)=>03:39:21.338 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_4 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:28.8090375Z (dda,BL9_100monres)=>03:39:21.338 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_5 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:28.8091169Z (dda,BL9_100monres)=>[ Previous repeated 2 times ]
2023-07-27T03:39:28.8092106Z (dda,BL9_100monres)=>03:39:21.338 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_5 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:28.8093356Z (dda,BL9_100monres)=>03:39:21.339 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_repto specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:28.8094616Z (dda,BL9_100monres)=>03:39:21.339 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_repto_evo specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:28.8096035Z (dda,BL9_100monres)=>03:39:21.339 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_scrawler_evo specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:28.8097337Z (dda,BL9_100monres)=>03:39:21.339 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_scrawler_evo specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-27T03:39:36.1106101Z (dda,BL9_100monres)=>03:39:23.932 INFO : src/mod_tracker.h:68: Tried check if 'FakeSpecial_s_gas' had a duplicate, but type 'overmap_special' does not track object sources
2023-07-27T03:39:36.1107665Z (dda,BL9_100monres)=>03:39:28.807 ERROR : src/item.cpp:1582 [ret_val<void> item::put_in(const item &, item_pocket::pocket_type, const bool)] tried to put an item (38_special) count (0) in a container (BL9_magnum_mk3) that cannot contain it: pocket unacceptable because item is not the correct ammo type
2023-07-27T03:39:36.1152000Z (dda,BL9_100monres)=>03:39:28.822 ERROR : src/item.cpp:1582 [ret_val<void> item::put_in(const item &, item_pocket::pocket_type, const bool)] tried to put an item (38_special) count (0) in a container (BL9_magnum) that cannot contain it: pocket unacceptable because item is not the correct ammo type
2023-07-27T03:39:36.1153326Z (dda,BL9_100monres)=>03:39:29.279 ERROR : src/item.cpp:1582 [ret_val<void> item::put_in(const item &, item_pocket::pocket_type, const bool)] tried to put an item (38_special) count (0) in a container (BL9_magnum_mk2) that cannot contain it: pocket unacceptable because item is not the correct ammo type
2023-07-27T03:39:36.1154107Z (dda,BL9_100monres)=>03:39:35.835 INFO : Game data loaded, running Catch2 session:
2023-07-27T03:39:36.1154655Z (dda,BL9_100monres)=>[1;33mFilters: ~*
2023-07-27T03:39:36.1155476Z (dda,BL9_100monres)=>[0mNo test cases matched '~*'
2023-07-27T03:39:36.1156057Z (dda,BL9_100monres)=>[1;33m===============================================================================[0m
2023-07-27T03:39:36.1156512Z (dda,BL9_100monres)=>[1;33mNo tests ran
2023-07-27T03:39:36.1156868Z (dda,BL9_100monres)=>[0m
2023-07-27T03:39:36.1157155Z (dda,BL9_100monres)=>
2023-07-27T03:39:36.1157519Z (dda,BL9_100monres)=>03:39:35.837 INFO : Finished in 0.00141128 seconds
2023-07-27T03:39:36.1157941Z (dda,BL9_100monres)=>03:39:35.837 INFO : Randomness seeded to: 1690429158
2023-07-27T03:39:36.1158289Z (dda,BL9_100monres)=>
2023-07-27T03:39:36.1158749Z (dda,BL9_100monres)=>03:39:35.837 INFO : Treating result as failure due to error logged during initialization.
