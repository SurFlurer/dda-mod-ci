2023-07-27T03:39:05.3192291Z (dda,secronom)=>
2023-07-27T03:39:05.3192750Z (dda,secronom)=>03:39:02.797 INFO : Randomness seeded to: 1690429142
2023-07-27T03:39:05.3193470Z (dda,secronom)=>03:39:02.798 WARNING : opendir [lang/mo/] failed with "No such file or directory".
2023-07-27T03:39:05.3194110Z (dda,secronom)=>03:39:02.800 INFO : SDL render devices: software, opengl, opengles2
2023-07-27T03:39:05.3194680Z (dda,secronom)=>03:39:02.800 INFO : [options] C locale set to C
2023-07-27T03:39:05.3195189Z (dda,secronom)=>03:39:02.800 INFO : [options] C++ locale set to C
2023-07-27T03:39:05.3195754Z (dda,secronom)=>03:39:04.982 ERROR : (error message will follow backtrace)
2023-07-27T03:39:05.3196554Z (dda,secronom)=>    ./tests/cata_test(debug_write_backtrace(std::ostream&)+0x23) [0x1f6a756]
2023-07-27T03:39:05.3197277Z (dda,secronom)=>    ./tests/cata_test(DebugLog(DebugLevel, DebugClass)+0x278) [0x1f69ce4]
2023-07-27T03:39:05.3198230Z (dda,secronom)=>    ./tests/cata_test(realDebugmsg(char const*, char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa0) [0x1f695be]
2023-07-27T03:39:05.3199207Z (dda,secronom)=>    ./tests/cata_test(JsonObject::error_skipped_members(std::vector<unsigned long, std::allocator<unsigned long> > const&) const+0x2bc) [0x209e8a8]
2023-07-27T03:39:05.3200023Z (dda,secronom)=>    ./tests/cata_test(JsonObject::report_unvisited() const+0x32c) [0x209e59a]
2023-07-27T03:39:05.3200712Z (dda,secronom)=>    ./tests/cata_test(JsonObject::~JsonObject()+0x3d) [0x1725e8f]
2023-07-27T03:39:05.3203029Z (dda,secronom)=>    ./tests/cata_test(Item_factory::set_use_methods_from_json(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, use_function, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, use_function> > >&, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >&)+0x5e9) [0x22ccb79]
2023-07-27T03:39:05.3205404Z (dda,secronom)=>    ./tests/cata_test(Item_factory::load_basic_info(JsonObject const&, itype&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2b0d) [0x22c0177]
2023-07-27T03:39:05.3206501Z (dda,secronom)=>    ./tests/cata_test(Item_factory::load_tool(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5f) [0x22c618f]
2023-07-27T03:39:05.3207657Z (dda,secronom)=>    ./tests/cata_test(DynamicDataLoader::load_object(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cata_path const&, cata_path const&)+0xae) [0x21c4018]
2023-07-27T03:39:05.3208897Z (dda,secronom)=>    ./tests/cata_test(DynamicDataLoader::load_all_from_json(JsonValue const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, loading_ui&, cata_path const&, cata_path const&)+0xdf) [0x21c4c7d]
2023-07-27T03:39:05.3210095Z (dda,secronom)=>    ./tests/cata_test(DynamicDataLoader::load_data_from_path(cata_path const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, loading_ui&)+0x130) [0x21c4a88]
2023-07-27T03:39:05.3211752Z (dda,secronom)=>    ./tests/cata_test(game::load_packs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<string_id<MOD_INFORMATION>, std::allocator<string_id<MOD_INFORMATION> > > const&, loading_ui&)+0x166) [0x20b6c4a]
2023-07-27T03:39:05.3213600Z (dda,secronom)=>    ./tests/cata_test(game::load_world_modfiles(loading_ui&)+0x2f8) [0x20a480c]
2023-07-27T03:39:05.3214240Z (dda,secronom)=>    ./tests/cata_test(main+0xf9b) [0x1b318d6]
2023-07-27T03:39:05.3215198Z (dda,secronom)=>    /lib/x86_64-linux-gnu/libc.so.6(+0x29d90) [0x7f13ce0abd90]
2023-07-27T03:39:05.3215977Z (dda,secronom)=>    /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0x80) [0x7f13ce0abe40]
2023-07-27T03:39:05.3216595Z (dda,secronom)=>    ./tests/cata_test(_start+0x25) [0x15017a5]
2023-07-27T03:39:05.3217007Z (dda,secronom)=>
2023-07-27T03:39:05.3217671Z (dda,secronom)=>    Attempting to repeat stack trace using debug symbolsâ€¦
2023-07-27T03:39:05.3226337Z (dda,secronom)=>    debug_write_backtrace(std::ostream&)
2023-07-27T03:39:05.3226778Z (dda,secronom)=>    ??:?
2023-07-27T03:39:05.3227186Z (dda,secronom)=>    DebugLog(DebugLevel, DebugClass)
2023-07-27T03:39:05.3227588Z (dda,secronom)=>    ??:?
2023-07-27T03:39:05.4360306Z (dda,secronom)=>    realDebugmsg(char const*, char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-07-27T03:39:05.4361685Z (dda,secronom)=>    ??:?
2023-07-27T03:39:05.4362865Z (dda,secronom)=>    JsonObject::error_skipped_members(std::vector<unsigned long, std::allocator<unsigned long> > const&) const
2023-07-27T03:39:05.4424408Z (dda,secronom)=>    ??:?
2023-07-27T03:39:05.4425075Z (dda,secronom)=>    JsonObject::report_unvisited() const
2023-07-27T03:39:05.4425633Z (dda,secronom)=>    ??:?
2023-07-27T03:39:05.4426189Z (dda,secronom)=>    JsonObject::~JsonObject()
2023-07-27T03:39:05.4426698Z (dda,secronom)=>    ??:?
2023-07-27T03:39:05.4429227Z (dda,secronom)=>    Item_factory::set_use_methods_from_json(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, use_function, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, use_function> > >&, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >&)
2023-07-27T03:39:05.4431491Z (dda,secronom)=>    ??:?
2023-07-27T03:39:05.4432385Z (dda,secronom)=>    Item_factory::load_basic_info(JsonObject const&, itype&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-07-27T03:39:05.4433130Z (dda,secronom)=>    ??:?
2023-07-27T03:39:05.4433995Z (dda,secronom)=>    Item_factory::load_tool(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-07-27T03:39:05.4434704Z (dda,secronom)=>    ??:?
2023-07-27T03:39:05.4435691Z (dda,secronom)=>    DynamicDataLoader::load_object(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cata_path const&, cata_path const&)
2023-07-27T03:39:05.4436506Z (dda,secronom)=>    ??:?
2023-07-27T03:39:05.4437544Z (dda,secronom)=>    DynamicDataLoader::load_all_from_json(JsonValue const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, loading_ui&, cata_path const&, cata_path const&)
2023-07-27T03:39:05.4438387Z (dda,secronom)=>    ??:?
2023-07-27T03:39:05.4439288Z (dda,secronom)=>    DynamicDataLoader::load_data_from_path(cata_path const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, loading_ui&)
2023-07-27T03:39:05.4440811Z (dda,secronom)=>    ??:?
2023-07-27T03:39:05.4442228Z (dda,secronom)=>    game::load_packs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<string_id<MOD_INFORMATION>, std::allocator<string_id<MOD_INFORMATION> > > const&, loading_ui&)
2023-07-27T03:39:05.4443121Z (dda,secronom)=>    ??:?
2023-07-27T03:39:05.4443693Z (dda,secronom)=>    game::load_world_modfiles(loading_ui&)
2023-07-27T03:39:05.4444239Z (dda,secronom)=>    ??:?
2023-07-27T03:39:05.4444699Z (dda,secronom)=>    main
2023-07-27T03:39:05.4445147Z (dda,secronom)=>    ??:?
2023-07-27T03:39:05.4445595Z (dda,secronom)=>    ??
2023-07-27T03:39:05.4446076Z (dda,secronom)=>    ??:0
2023-07-27T03:39:05.4446499Z (dda,secronom)=>    ??
2023-07-27T03:39:05.4446974Z (dda,secronom)=>    ??:0
2023-07-27T03:39:05.4447424Z (dda,secronom)=>    _start
2023-07-27T03:39:05.4447876Z (dda,secronom)=>    ??:?
2023-07-27T03:39:05.4448486Z (dda,secronom)=>Backtrace emission took 1 seconds.
2023-07-27T03:39:05.4449631Z (dda,secronom)=>(continued from above) ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-27T03:39:05.4452166Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "no_deactivate_msg" in JSON data[0m
2023-07-27T03:39:05.4456831Z (dda,secronom)=>03:39:05.435 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-27T03:39:05.4459064Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "sound_msg" in JSON data[0m
2023-07-27T03:39:05.4460958Z (dda,secronom)=>03:39:05.436 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-27T03:39:05.4463199Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "sound_volume" in JSON data[0m
2023-07-27T03:39:05.4466610Z (dda,secronom)=>03:39:05.436 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-27T03:39:05.4487235Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "no_deactivate_msg" in JSON data[0m
2023-07-27T03:39:05.4489021Z (dda,secronom)=>03:39:05.437 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-27T03:39:05.4491059Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "sound_msg" in JSON data[0m
2023-07-27T03:39:05.4492510Z (dda,secronom)=>03:39:05.437 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-27T03:39:05.4494425Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "sound_volume" in JSON data[0m
2023-07-27T03:39:05.4496151Z (dda,secronom)=>03:39:05.438 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-27T03:39:05.4498194Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "no_deactivate_msg" in JSON data[0m
2023-07-27T03:39:05.4499645Z (dda,secronom)=>03:39:05.438 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-27T03:39:05.4507452Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "sound_msg" in JSON data[0m
2023-07-27T03:39:05.4509150Z (dda,secronom)=>03:39:05.438 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-27T03:39:05.5035394Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "sound_volume" in JSON data[0m
2023-07-27T03:39:05.5037159Z (dda,secronom)=>03:39:05.439 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-27T03:39:05.5041520Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "no_deactivate_msg" in JSON data[0m
2023-07-27T03:39:05.5043712Z (dda,secronom)=>03:39:05.439 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-27T03:39:05.5045744Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "sound_msg" in JSON data[0m
2023-07-27T03:39:05.5047172Z (dda,secronom)=>03:39:05.440 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-27T03:39:05.5049102Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "sound_volume" in JSON data[0m
2023-07-27T03:39:05.5050519Z (dda,secronom)=>03:39:05.440 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-27T03:39:05.5052737Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "no_deactivate_msg" in JSON data[0m
2023-07-27T03:39:05.5057813Z (dda,secronom)=>03:39:05.441 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-27T03:39:05.5060220Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "sound_msg" in JSON data[0m
2023-07-27T03:39:05.5061825Z (dda,secronom)=>03:39:05.441 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-27T03:39:05.5065405Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "sound_volume" in JSON data[0m
2023-07-27T03:39:05.5068011Z (dda,secronom)=>03:39:05.499 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_flesh_initial specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-27T03:39:05.5635213Z (dda,secronom)=>03:39:05.501 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_veinstalk_initial specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-27T03:39:05.5636373Z (dda,secronom)=>03:39:05.503 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_insect_saddler specifies more than one attack of (sub)type leap, ignoring all but the last
2023-07-27T03:39:05.5637433Z (dda,secronom)=>03:39:05.503 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_insect_saddler_brute specifies more than one attack of (sub)type leap, ignoring all but the last
2023-07-27T03:39:05.5638464Z (dda,secronom)=>03:39:05.503 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_insect_saddler_scout specifies more than one attack of (sub)type leap, ignoring all but the last
2023-07-27T03:39:05.5639842Z (dda,secronom)=>03:39:05.513 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_zombie_fleshknot_weak specifies more than one attack of (sub)type gun, ignoring all but the last
2023-07-27T03:39:05.5640888Z (dda,secronom)=>03:39:05.513 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_zombie_fleshknot_mode specifies more than one attack of (sub)type gun, ignoring all but the last
2023-07-27T03:39:05.5641917Z (dda,secronom)=>03:39:05.514 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_zombie_fleshknot_stro specifies more than one attack of (sub)type gun, ignoring all but the last
2023-07-27T03:39:05.5642958Z (dda,secronom)=>03:39:05.514 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_zombie_fleshknot_vstro specifies more than one attack of (sub)type gun, ignoring all but the last
2023-07-27T03:39:05.5644031Z (dda,secronom)=>03:39:05.538 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_centipede_mom specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-27T03:39:05.5645096Z (dda,secronom)=>03:39:05.539 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_spider_cellar_mega specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-27T03:39:05.5646152Z (dda,secronom)=>03:39:05.552 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_zombie_wretch specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-27T03:39:05.5647543Z (dda,secronom)=>03:39:05.555 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_boomer_glutton specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-27T03:39:05.5648852Z (dda,secronom)=>03:39:05.555 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_boomer_claymore specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-27T03:39:05.5649931Z (dda,secronom)=>03:39:05.557 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_zombie_phase_skulker specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-27T03:39:05.5651015Z (dda,secronom)=>03:39:05.557 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_zombie_phase_shrike specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-27T03:39:05.5652094Z (dda,secronom)=>03:39:05.561 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_frog_mother specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-27T03:39:05.5653137Z (dda,secronom)=>03:39:05.563 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_zombie_crawler_pupa specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-27T03:39:18.5955359Z (dda,secronom)=>03:39:05.563 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_zombie_pupa specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-27T03:39:18.5961988Z (dda,secronom)=>03:39:05.563 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_hulk_pupa specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-27T03:39:18.5963513Z (dda,secronom)=>03:39:05.563 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_zombie_pupa_shady specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-27T03:39:18.5964805Z (dda,secronom)=>03:39:07.982 INFO : src/mod_tracker.h:68: Tried check if 'FakeSpecial_s_gas' had a duplicate, but type 'overmap_special' does not track object sources
2023-07-27T03:39:18.5965779Z (dda,secronom)=>03:39:11.348 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_brute_pupa specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-27T03:39:18.5967285Z (dda,secronom)=>03:39:17.011 ERROR : src/mapgen.cpp:1212 [virtual void mapgen_value<string_id<VehicleGroup>>::id_source::check(const std::string &, const mapgen_parameters &) const [Id = string_id<VehicleGroup>]] mapgen 'nested mapgen mx_secro_ssf_nested' uses invalid entry 'secro_veh_sscarrier'
2023-07-27T03:39:18.5968343Z (dda,secronom)=>03:39:17.011 ERROR : src/vehicle_group.cpp:40 [const VehicleGroup &string_id<VehicleGroup>::obj() const [T = VehicleGroup]] invalid vehicle group id secro_veh_sscarrier
2023-07-27T03:39:18.5970312Z (dda,secronom)=>03:39:17.011 ERROR : src/mapgen.cpp:2657 [virtual void jmapgen_vehicle::check(const std::string &, const mapgen_parameters &, const jmapgen_int &, const jmapgen_int &) const] In nested mapgen mx_secro_ssf_nested, vehicle placement at x:[12,12], y:[10,10]: potential placement of vehicle out of bounds.  At rotation 270 the vehicle [vgroup_id ; vproto_id ] extends too far west, reaching coordinate x = -2147483636 (should be at least 0)
2023-07-27T03:39:18.5972060Z (dda,secronom)=>03:39:17.011 ERROR : src/mapgen.cpp:1212 [virtual void mapgen_value<string_id<VehicleGroup>>::id_source::check(const std::string &, const mapgen_parameters &) const [Id = string_id<VehicleGroup>]] mapgen 'nested mapgen mx_secro_ssb_nested' uses invalid entry 'secro_veh_sscarrier'
2023-07-27T03:39:18.5973269Z (dda,secronom)=>03:39:17.011 ERROR : src/vehicle_group.cpp:40 [const VehicleGroup &string_id<VehicleGroup>::obj() const [T = VehicleGroup]] invalid vehicle group id secro_veh_sscarrier
2023-07-27T03:39:18.5975131Z (dda,secronom)=>03:39:17.011 ERROR : src/mapgen.cpp:2657 [virtual void jmapgen_vehicle::check(const std::string &, const mapgen_parameters &, const jmapgen_int &, const jmapgen_int &) const] In nested mapgen mx_secro_ssb_nested, vehicle placement at x:[12,12], y:[10,10]: potential placement of vehicle out of bounds.  At rotation 270 the vehicle [vgroup_id ; vproto_id ] extends too far west, reaching coordinate x = -2147483636 (should be at least 0)
2023-07-27T03:39:18.5976086Z (dda,secronom)=>03:39:18.300 INFO : Game data loaded, running Catch2 session:
2023-07-27T03:39:18.5976557Z (dda,secronom)=>[1;33mFilters: ~*
2023-07-27T03:39:18.5976996Z (dda,secronom)=>[0mNo test cases matched '~*'
2023-07-27T03:39:18.5977542Z (dda,secronom)=>[1;33m===============================================================================[0m
2023-07-27T03:39:18.5977976Z (dda,secronom)=>[1;33mNo tests ran
2023-07-27T03:39:18.5978338Z (dda,secronom)=>[0m
2023-07-27T03:39:18.5978604Z (dda,secronom)=>
2023-07-27T03:39:18.5978964Z (dda,secronom)=>03:39:18.302 INFO : Finished in 0.00144158 seconds
2023-07-27T03:39:18.5979392Z (dda,secronom)=>03:39:18.302 INFO : Randomness seeded to: 1690429142
2023-07-27T03:39:18.5979719Z (dda,secronom)=>
2023-07-27T03:39:18.5980178Z (dda,secronom)=>03:39:18.302 INFO : Treating result as failure due to error logged during initialization.
