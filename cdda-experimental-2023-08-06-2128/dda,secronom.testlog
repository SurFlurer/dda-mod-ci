2023-08-07T13:04:11.2144172Z (dda,secronom)=>
2023-08-07T13:04:11.2144832Z (dda,secronom)=>13:04:09.166 INFO : Randomness seeded to: 1691413449
2023-08-07T13:04:11.2145485Z (dda,secronom)=>13:04:09.166 WARNING : opendir [lang/mo/] failed with "No such file or directory".
2023-08-07T13:04:11.2146136Z (dda,secronom)=>13:04:09.168 INFO : SDL render devices: software, opengl, opengles2
2023-08-07T13:04:11.2146717Z (dda,secronom)=>13:04:09.168 INFO : [options] C locale set to C
2023-08-07T13:04:11.2147425Z (dda,secronom)=>13:04:09.168 INFO : [options] C++ locale set to C
2023-08-07T13:04:11.2148056Z (dda,secronom)=>13:04:10.960 ERROR : (error message will follow backtrace)
2023-08-07T13:04:11.2148801Z (dda,secronom)=>    ./tests/cata_test(debug_write_backtrace(std::ostream&)+0x23) [0x1f79fa6]
2023-08-07T13:04:11.2149477Z (dda,secronom)=>    ./tests/cata_test(DebugLog(DebugLevel, DebugClass)+0x278) [0x1f79534]
2023-08-07T13:04:11.2150274Z (dda,secronom)=>    ./tests/cata_test(realDebugmsg(char const*, char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa0) [0x1f78e0e]
2023-08-07T13:04:11.2151207Z (dda,secronom)=>    ./tests/cata_test(mtype::add_special_attack(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xfa) [0x26b4a62]
2023-08-07T13:04:11.2152232Z (dda,secronom)=>    ./tests/cata_test(mtype::add_special_attacks(JsonObject const&, std::basic_string_view<char, std::char_traits<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x155) [0x26b31b9]
2023-08-07T13:04:11.2153513Z (dda,secronom)=>    ./tests/cata_test(mtype::load(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4409) [0x26afca7]
2023-08-07T13:04:11.2154649Z (dda,secronom)=>    ./tests/cata_test(generic_factory<mtype>::load(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x119) [0x26b7ab3]
2023-08-07T13:04:11.2155768Z (dda,secronom)=>    ./tests/cata_test(DynamicDataLoader::load_object(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cata_path const&, cata_path const&)+0xae) [0x21d30b2]
2023-08-07T13:04:11.2156945Z (dda,secronom)=>    ./tests/cata_test(DynamicDataLoader::load_all_from_json(JsonValue const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, loading_ui&, cata_path const&, cata_path const&)+0xdf) [0x21d3d17]
2023-08-07T13:04:11.2158013Z (dda,secronom)=>    ./tests/cata_test(DynamicDataLoader::load_data_from_path(cata_path const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, loading_ui&)+0x130) [0x21d3b22]
2023-08-07T13:04:11.2159091Z (dda,secronom)=>    ./tests/cata_test(game::load_packs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<string_id<MOD_INFORMATION>, std::allocator<string_id<MOD_INFORMATION> > > const&, loading_ui&)+0x166) [0x20c63c0]
2023-08-07T13:04:11.2159948Z (dda,secronom)=>    ./tests/cata_test(game::load_world_modfiles(loading_ui&)+0x2f8) [0x20b3f6e]
2023-08-07T13:04:11.2160542Z (dda,secronom)=>    ./tests/cata_test(main+0xf9b) [0x1b3dafe]
2023-08-07T13:04:11.2161396Z (dda,secronom)=>    /lib/x86_64-linux-gnu/libc.so.6(+0x29d90) [0x7faebdc22d90]
2023-08-07T13:04:11.2162086Z (dda,secronom)=>    /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0x80) [0x7faebdc22e40]
2023-08-07T13:04:11.2162655Z (dda,secronom)=>    ./tests/cata_test(_start+0x25) [0x1507ab5]
2023-08-07T13:04:11.2163118Z (dda,secronom)=>
2023-08-07T13:04:11.2166018Z (dda,secronom)=>    Attempting to repeat stack trace using debug symbolsâ€¦
2023-08-07T13:04:11.2239088Z (dda,secronom)=>    debug_write_backtrace(std::ostream&)
2023-08-07T13:04:11.2239437Z (dda,secronom)=>    ??:?
2023-08-07T13:04:11.2239767Z (dda,secronom)=>    DebugLog(DebugLevel, DebugClass)
2023-08-07T13:04:11.2240364Z (dda,secronom)=>    ??:?
2023-08-07T13:04:11.2240870Z (dda,secronom)=>    realDebugmsg(char const*, char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-08-07T13:04:11.2241286Z (dda,secronom)=>    ??:?
2023-08-07T13:04:11.2241783Z (dda,secronom)=>    mtype::add_special_attack(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-08-07T13:04:11.2242181Z (dda,secronom)=>    ??:?
2023-08-07T13:04:11.2242734Z (dda,secronom)=>    mtype::add_special_attacks(JsonObject const&, std::basic_string_view<char, std::char_traits<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-08-07T13:04:11.2243199Z (dda,secronom)=>    ??:?
2023-08-07T13:04:11.2243676Z (dda,secronom)=>    mtype::load(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-08-07T13:04:11.2244065Z (dda,secronom)=>    ??:?
2023-08-07T13:04:11.3433041Z (dda,secronom)=>    generic_factory<mtype>::load(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-08-07T13:04:11.3433817Z (dda,secronom)=>    ??:?
2023-08-07T13:04:11.3434627Z (dda,secronom)=>    DynamicDataLoader::load_object(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cata_path const&, cata_path const&)
2023-08-07T13:04:11.3435362Z (dda,secronom)=>    ??:?
2023-08-07T13:04:11.3436112Z (dda,secronom)=>    DynamicDataLoader::load_all_from_json(JsonValue const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, loading_ui&, cata_path const&, cata_path const&)
2023-08-07T13:04:11.3436747Z (dda,secronom)=>    ??:?
2023-08-07T13:04:11.3437752Z (dda,secronom)=>    DynamicDataLoader::load_data_from_path(cata_path const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, loading_ui&)
2023-08-07T13:04:11.3438438Z (dda,secronom)=>    ??:?
2023-08-07T13:04:11.3439834Z (dda,secronom)=>    game::load_packs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<string_id<MOD_INFORMATION>, std::allocator<string_id<MOD_INFORMATION> > > const&, loading_ui&)
2023-08-07T13:04:11.3440494Z (dda,secronom)=>    ??:?
2023-08-07T13:04:11.3441023Z (dda,secronom)=>    game::load_world_modfiles(loading_ui&)
2023-08-07T13:04:11.3442234Z (dda,secronom)=>    ??:?
2023-08-07T13:04:11.3442692Z (dda,secronom)=>    main
2023-08-07T13:04:11.3443102Z (dda,secronom)=>    ??:?
2023-08-07T13:04:11.3443481Z (dda,secronom)=>    ??
2023-08-07T13:04:11.3443899Z (dda,secronom)=>    ??:0
2023-08-07T13:04:11.3444341Z (dda,secronom)=>    ??
2023-08-07T13:04:11.3444742Z (dda,secronom)=>    ??:0
2023-08-07T13:04:11.3445274Z (dda,secronom)=>    _start
2023-08-07T13:04:11.3445801Z (dda,secronom)=>    ??:?
2023-08-07T13:04:11.3446302Z (dda,secronom)=>Backtrace emission took 1 seconds.
2023-08-07T13:04:11.3447248Z (dda,secronom)=>(continued from above) ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_flesh_initial specifies more than one attack of (sub)type spell, ignoring all but the last
2023-08-07T13:04:11.3448527Z (dda,secronom)=>13:04:11.300 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_veinstalk_initial specifies more than one attack of (sub)type spell, ignoring all but the last
2023-08-07T13:04:11.3449628Z (dda,secronom)=>13:04:11.302 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_insect_saddler specifies more than one attack of (sub)type leap, ignoring all but the last
2023-08-07T13:04:11.3450653Z (dda,secronom)=>13:04:11.302 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_insect_saddler_brute specifies more than one attack of (sub)type leap, ignoring all but the last
2023-08-07T13:04:11.3451831Z (dda,secronom)=>13:04:11.302 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_insect_saddler_scout specifies more than one attack of (sub)type leap, ignoring all but the last
2023-08-07T13:04:11.3452788Z (dda,secronom)=>13:04:11.311 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_zombie_fleshknot_weak specifies more than one attack of (sub)type gun, ignoring all but the last
2023-08-07T13:04:11.3453825Z (dda,secronom)=>13:04:11.311 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_zombie_fleshknot_mode specifies more than one attack of (sub)type gun, ignoring all but the last
2023-08-07T13:04:11.3454776Z (dda,secronom)=>13:04:11.311 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_zombie_fleshknot_stro specifies more than one attack of (sub)type gun, ignoring all but the last
2023-08-07T13:04:11.3455822Z (dda,secronom)=>13:04:11.311 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_zombie_fleshknot_vstro specifies more than one attack of (sub)type gun, ignoring all but the last
2023-08-07T13:04:11.3456865Z (dda,secronom)=>13:04:11.330 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_centipede_mom specifies more than one attack of (sub)type spell, ignoring all but the last
2023-08-07T13:04:11.3457926Z (dda,secronom)=>13:04:11.331 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_spider_cellar_mega specifies more than one attack of (sub)type spell, ignoring all but the last
2023-08-07T13:04:23.6276151Z (dda,secronom)=>13:04:11.341 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_zombie_wretch specifies more than one attack of (sub)type spell, ignoring all but the last
2023-08-07T13:04:23.6277370Z (dda,secronom)=>13:04:11.343 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_boomer_glutton specifies more than one attack of (sub)type spell, ignoring all but the last
2023-08-07T13:04:23.6278470Z (dda,secronom)=>13:04:11.343 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_boomer_claymore specifies more than one attack of (sub)type spell, ignoring all but the last
2023-08-07T13:04:23.6280766Z (dda,secronom)=>13:04:11.344 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_zombie_phase_skulker specifies more than one attack of (sub)type spell, ignoring all but the last
2023-08-07T13:04:23.6281717Z (dda,secronom)=>13:04:11.344 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_zombie_phase_shrike specifies more than one attack of (sub)type spell, ignoring all but the last
2023-08-07T13:04:23.6282715Z (dda,secronom)=>13:04:11.348 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_frog_mother specifies more than one attack of (sub)type spell, ignoring all but the last
2023-08-07T13:04:23.6283804Z (dda,secronom)=>13:04:11.349 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_zombie_crawler_pupa specifies more than one attack of (sub)type spell, ignoring all but the last
2023-08-07T13:04:23.6286761Z (dda,secronom)=>13:04:11.349 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_zombie_pupa specifies more than one attack of (sub)type spell, ignoring all but the last
2023-08-07T13:04:23.6288398Z (dda,secronom)=>13:04:11.349 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_hulk_pupa specifies more than one attack of (sub)type spell, ignoring all but the last
2023-08-07T13:04:23.6289419Z (dda,secronom)=>13:04:11.350 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_zombie_pupa_shady specifies more than one attack of (sub)type spell, ignoring all but the last
2023-08-07T13:04:23.6290531Z (dda,secronom)=>13:04:13.293 INFO : src/mod_tracker.h:68: Tried check if 'FakeSpecial_s_gas' had a duplicate, but type 'overmap_special' does not track object sources
2023-08-07T13:04:23.6291394Z (dda,secronom)=>13:04:16.165 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_brute_pupa specifies more than one attack of (sub)type spell, ignoring all but the last
2023-08-07T13:04:23.6292152Z (dda,secronom)=>13:04:23.395 INFO : Game data loaded, running Catch2 session:
2023-08-07T13:04:23.6294283Z (dda,secronom)=>[1;33mFilters: ~*
2023-08-07T13:04:23.6294779Z (dda,secronom)=>[0mNo test cases matched '~*'
2023-08-07T13:04:23.6295331Z (dda,secronom)=>[1;33m===============================================================================[0m
2023-08-07T13:04:23.6353559Z (dda,secronom)=>[1;33mNo tests ran
2023-08-07T13:04:23.6353858Z (dda,secronom)=>[0m
2023-08-07T13:04:23.6354077Z (dda,secronom)=>
2023-08-07T13:04:23.6354352Z (dda,secronom)=>13:04:23.396 INFO : Finished in 0.00110841 seconds
2023-08-07T13:04:23.6354676Z (dda,secronom)=>13:04:23.396 INFO : Randomness seeded to: 1691413449
2023-08-07T13:04:23.6355202Z (dda,secronom)=>
2023-08-07T13:04:23.6355559Z (dda,secronom)=>13:04:23.396 INFO : Treating result as failure due to error logged during initialization.
