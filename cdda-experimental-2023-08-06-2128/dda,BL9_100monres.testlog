2023-08-07T13:05:12.2808583Z (dda,BL9_100monres)=>
2023-08-07T13:05:12.2808956Z (dda,BL9_100monres)=>13:05:10.213 INFO : Randomness seeded to: 1691413510
2023-08-07T13:05:12.2809373Z (dda,BL9_100monres)=>13:05:10.214 WARNING : opendir [lang/mo/] failed with "No such file or directory".
2023-08-07T13:05:12.2809795Z (dda,BL9_100monres)=>13:05:10.216 INFO : SDL render devices: software, opengl, opengles2
2023-08-07T13:05:12.2810166Z (dda,BL9_100monres)=>13:05:10.216 INFO : [options] C locale set to C
2023-08-07T13:05:12.2810498Z (dda,BL9_100monres)=>13:05:10.216 INFO : [options] C++ locale set to C
2023-08-07T13:05:12.2810879Z (dda,BL9_100monres)=>13:05:12.029 ERROR : (error message will follow backtrace)
2023-08-07T13:05:12.2811366Z (dda,BL9_100monres)=>    ./tests/cata_test(debug_write_backtrace(std::ostream&)+0x23) [0x1f79fa6]
2023-08-07T13:05:12.2812181Z (dda,BL9_100monres)=>    ./tests/cata_test(DebugLog(DebugLevel, DebugClass)+0x278) [0x1f79534]
2023-08-07T13:05:12.2812839Z (dda,BL9_100monres)=>    ./tests/cata_test(realDebugmsg(char const*, char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa0) [0x1f78e0e]
2023-08-07T13:05:12.2813579Z (dda,BL9_100monres)=>    ./tests/cata_test(mtype::add_special_attack(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xfa) [0x26b4a62]
2023-08-07T13:05:12.2814423Z (dda,BL9_100monres)=>    ./tests/cata_test(mtype::add_special_attacks(JsonObject const&, std::basic_string_view<char, std::char_traits<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x155) [0x26b31b9]
2023-08-07T13:05:12.2815213Z (dda,BL9_100monres)=>    ./tests/cata_test(mtype::load(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3aa8) [0x26af346]
2023-08-07T13:05:12.2815943Z (dda,BL9_100monres)=>    ./tests/cata_test(generic_factory<mtype>::load(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x119) [0x26b7ab3]
2023-08-07T13:05:12.2816759Z (dda,BL9_100monres)=>    ./tests/cata_test(DynamicDataLoader::load_object(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cata_path const&, cata_path const&)+0xae) [0x21d30b2]
2023-08-07T13:05:12.2817620Z (dda,BL9_100monres)=>    ./tests/cata_test(DynamicDataLoader::load_all_from_json(JsonValue const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, loading_ui&, cata_path const&, cata_path const&)+0xdf) [0x21d3d17]
2023-08-07T13:05:12.2818591Z (dda,BL9_100monres)=>    ./tests/cata_test(DynamicDataLoader::load_data_from_path(cata_path const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, loading_ui&)+0x130) [0x21d3b22]
2023-08-07T13:05:12.2819501Z (dda,BL9_100monres)=>    ./tests/cata_test(game::load_packs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<string_id<MOD_INFORMATION>, std::allocator<string_id<MOD_INFORMATION> > > const&, loading_ui&)+0x166) [0x20c63c0]
2023-08-07T13:05:12.2820147Z (dda,BL9_100monres)=>    ./tests/cata_test(game::load_world_modfiles(loading_ui&)+0x2f8) [0x20b3f6e]
2023-08-07T13:05:12.2820558Z (dda,BL9_100monres)=>    ./tests/cata_test(main+0xf9b) [0x1b3dafe]
2023-08-07T13:05:12.2821219Z (dda,BL9_100monres)=>    /lib/x86_64-linux-gnu/libc.so.6(+0x29d90) [0x7f4f0785ed90]
2023-08-07T13:05:12.2821773Z (dda,BL9_100monres)=>    /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0x80) [0x7f4f0785ee40]
2023-08-07T13:05:12.2822178Z (dda,BL9_100monres)=>    ./tests/cata_test(_start+0x25) [0x1507ab5]
2023-08-07T13:05:12.2822434Z (dda,BL9_100monres)=>
2023-08-07T13:05:12.2822887Z (dda,BL9_100monres)=>    Attempting to repeat stack trace using debug symbolsâ€¦
2023-08-07T13:05:12.2823301Z (dda,BL9_100monres)=>    debug_write_backtrace(std::ostream&)
2023-08-07T13:05:12.2823618Z (dda,BL9_100monres)=>    ??:?
2023-08-07T13:05:12.2824181Z (dda,BL9_100monres)=>    DebugLog(DebugLevel, DebugClass)
2023-08-07T13:05:12.2824495Z (dda,BL9_100monres)=>    ??:?
2023-08-07T13:05:12.2825358Z (dda,BL9_100monres)=>    realDebugmsg(char const*, char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-08-07T13:05:12.2825863Z (dda,BL9_100monres)=>    ??:?
2023-08-07T13:05:12.2826417Z (dda,BL9_100monres)=>    mtype::add_special_attack(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-08-07T13:05:12.2826898Z (dda,BL9_100monres)=>    ??:?
2023-08-07T13:05:12.2827550Z (dda,BL9_100monres)=>    mtype::add_special_attacks(JsonObject const&, std::basic_string_view<char, std::char_traits<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-08-07T13:05:12.2828193Z (dda,BL9_100monres)=>    ??:?
2023-08-07T13:05:12.3692695Z (dda,BL9_100monres)=>    mtype::load(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-08-07T13:05:12.3693621Z (dda,BL9_100monres)=>    ??:?
2023-08-07T13:05:12.3694799Z (dda,BL9_100monres)=>    generic_factory<mtype>::load(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-08-07T13:05:12.3695278Z (dda,BL9_100monres)=>    ??:?
2023-08-07T13:05:12.3695856Z (dda,BL9_100monres)=>    DynamicDataLoader::load_object(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cata_path const&, cata_path const&)
2023-08-07T13:05:12.3696345Z (dda,BL9_100monres)=>    ??:?
2023-08-07T13:05:12.3696929Z (dda,BL9_100monres)=>    DynamicDataLoader::load_all_from_json(JsonValue const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, loading_ui&, cata_path const&, cata_path const&)
2023-08-07T13:05:12.3697413Z (dda,BL9_100monres)=>    ??:?
2023-08-07T13:05:12.3697930Z (dda,BL9_100monres)=>    DynamicDataLoader::load_data_from_path(cata_path const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, loading_ui&)
2023-08-07T13:05:12.3698365Z (dda,BL9_100monres)=>    ??:?
2023-08-07T13:05:12.3698978Z (dda,BL9_100monres)=>    game::load_packs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<string_id<MOD_INFORMATION>, std::allocator<string_id<MOD_INFORMATION> > > const&, loading_ui&)
2023-08-07T13:05:12.3699480Z (dda,BL9_100monres)=>    ??:?
2023-08-07T13:05:12.3700041Z (dda,BL9_100monres)=>    game::load_world_modfiles(loading_ui&)
2023-08-07T13:05:12.3700364Z (dda,BL9_100monres)=>    ??:?
2023-08-07T13:05:12.3700626Z (dda,BL9_100monres)=>    main
2023-08-07T13:05:12.3700885Z (dda,BL9_100monres)=>    ??:?
2023-08-07T13:05:12.3701151Z (dda,BL9_100monres)=>    ??
2023-08-07T13:05:12.3701426Z (dda,BL9_100monres)=>    ??:0
2023-08-07T13:05:12.3701666Z (dda,BL9_100monres)=>    ??
2023-08-07T13:05:12.3701940Z (dda,BL9_100monres)=>    ??:0
2023-08-07T13:05:12.3702200Z (dda,BL9_100monres)=>    _start
2023-08-07T13:05:12.3702465Z (dda,BL9_100monres)=>    ??:?
2023-08-07T13:05:12.3702726Z (dda,BL9_100monres)=>Backtrace emission took 0 seconds.
2023-08-07T13:05:12.3703455Z (dda,BL9_100monres)=>(continued from above) ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_inhrav_4 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:12.3704307Z (dda,BL9_100monres)=>13:05:12.366 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_inhrav_5 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:12.3705112Z (dda,BL9_100monres)=>13:05:12.366 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_yengn_4 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:12.3705890Z (dda,BL9_100monres)=>13:05:12.366 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_yengn_5 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:12.3706660Z (dda,BL9_100monres)=>13:05:12.367 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_ulniv_4 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:12.3707440Z (dda,BL9_100monres)=>13:05:12.367 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_ulniv_5 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:12.3708336Z (dda,BL9_100monres)=>13:05:12.367 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_ezron_4 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:12.3709097Z (dda,BL9_100monres)=>13:05:12.367 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_ezron_5 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:12.3709884Z (dda,BL9_100monres)=>13:05:12.367 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_tavrav_5 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:12.3773044Z (dda,BL9_100monres)=>13:05:12.369 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_argan_6 specifies more than one attack of (sub)type spell, ignoring all but the last
2023-08-07T13:05:12.3774057Z (dda,BL9_100monres)=>13:05:12.369 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_wanzel_6 specifies more than one attack of (sub)type spell, ignoring all but the last
2023-08-07T13:05:12.3774984Z (dda,BL9_100monres)=>13:05:12.371 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_davran_6 specifies more than one attack of (sub)type spell, ignoring all but the last
2023-08-07T13:05:12.3776131Z (dda,BL9_100monres)=>13:05:12.372 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_salden_6 specifies more than one attack of (sub)type spell, ignoring all but the last
2023-08-07T13:05:12.3780046Z (dda,BL9_100monres)=>13:05:12.373 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_mutant_2 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:12.3780867Z (dda,BL9_100monres)=>13:05:12.374 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_mutant_evo_2 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:12.3781654Z (dda,BL9_100monres)=>13:05:12.376 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_assassin specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:12.3782468Z (dda,BL9_100monres)=>13:05:12.376 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_assassin specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:12.3783271Z (dda,BL9_100monres)=>13:05:12.376 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_twisted_one specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:12.3783772Z (dda,BL9_100monres)=>[ Previous repeated 2 times ]
2023-08-07T13:05:12.3784371Z (dda,BL9_100monres)=>13:05:12.376 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_twisted_one specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:12.3785165Z (dda,BL9_100monres)=>13:05:12.377 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_inhrav_6 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:12.3785936Z (dda,BL9_100monres)=>13:05:12.377 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_yengn_6 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:12.3786857Z (dda,BL9_100monres)=>13:05:12.377 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_ulniv_6 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:12.3787613Z (dda,BL9_100monres)=>13:05:12.377 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_ezron_6 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:12.3788402Z (dda,BL9_100monres)=>13:05:12.377 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_1 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:12.3788900Z (dda,BL9_100monres)=>[ Previous repeated 2 times ]
2023-08-07T13:05:12.3789519Z (dda,BL9_100monres)=>13:05:12.377 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_1 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:18.8496609Z (dda,BL9_100monres)=>13:05:12.377 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_regen specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:18.8498176Z (dda,BL9_100monres)=>13:05:12.377 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_regen_spiky specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:18.8546151Z (dda,BL9_100monres)=>13:05:12.377 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_regen_spiky specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:18.8547006Z (dda,BL9_100monres)=>13:05:12.378 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_vile_one specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:18.8547814Z (dda,BL9_100monres)=>13:05:12.378 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_2 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:18.8548318Z (dda,BL9_100monres)=>[ Previous repeated 2 times ]
2023-08-07T13:05:18.8548948Z (dda,BL9_100monres)=>13:05:12.378 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_2 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:18.8549758Z (dda,BL9_100monres)=>13:05:12.378 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_3 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:18.8550249Z (dda,BL9_100monres)=>[ Previous repeated 2 times ]
2023-08-07T13:05:18.8550860Z (dda,BL9_100monres)=>13:05:12.378 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_3 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:18.8551666Z (dda,BL9_100monres)=>13:05:12.378 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_4 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:18.8552350Z (dda,BL9_100monres)=>[ Previous repeated 2 times ]
2023-08-07T13:05:18.8552936Z (dda,BL9_100monres)=>13:05:12.378 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_4 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:18.8553718Z (dda,BL9_100monres)=>13:05:12.378 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_5 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:18.8554193Z (dda,BL9_100monres)=>[ Previous repeated 2 times ]
2023-08-07T13:05:18.8554796Z (dda,BL9_100monres)=>13:05:12.379 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_5 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:18.8555601Z (dda,BL9_100monres)=>13:05:12.379 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_repto specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:18.8556376Z (dda,BL9_100monres)=>13:05:12.379 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_repto_evo specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:18.8557173Z (dda,BL9_100monres)=>13:05:12.379 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_scrawler_evo specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:18.8558065Z (dda,BL9_100monres)=>13:05:12.379 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_scrawler_evo specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-08-07T13:05:26.2967266Z (dda,BL9_100monres)=>13:05:14.529 INFO : src/mod_tracker.h:68: Tried check if 'FakeSpecial_s_gas' had a duplicate, but type 'overmap_special' does not track object sources
2023-08-07T13:05:26.2972985Z (dda,BL9_100monres)=>13:05:18.849 ERROR : src/item.cpp:1590 [ret_val<void> item::put_in(const item &, item_pocket::pocket_type, const bool)] tried to put an item (38_special) count (0) in a container (BL9_magnum_mk3) that cannot contain it: pocket unacceptable because item is not the correct ammo type
2023-08-07T13:05:26.2974363Z (dda,BL9_100monres)=>13:05:18.991 ERROR : src/item.cpp:1590 [ret_val<void> item::put_in(const item &, item_pocket::pocket_type, const bool)] tried to put an item (38_special) count (0) in a container (BL9_magnum_mk2) that cannot contain it: pocket unacceptable because item is not the correct ammo type
2023-08-07T13:05:26.2975523Z (dda,BL9_100monres)=>13:05:19.374 ERROR : src/item.cpp:1590 [ret_val<void> item::put_in(const item &, item_pocket::pocket_type, const bool)] tried to put an item (38_special) count (0) in a container (BL9_magnum) that cannot contain it: pocket unacceptable because item is not the correct ammo type
2023-08-07T13:05:26.2976282Z (dda,BL9_100monres)=>13:05:26.070 INFO : Game data loaded, running Catch2 session:
2023-08-07T13:05:26.2976974Z (dda,BL9_100monres)=>[1;33mFilters: ~*
2023-08-07T13:05:26.2977350Z (dda,BL9_100monres)=>[0mNo test cases matched '~*'
2023-08-07T13:05:26.2977813Z (dda,BL9_100monres)=>[1;33m===============================================================================[0m
2023-08-07T13:05:26.2978160Z (dda,BL9_100monres)=>[1;33mNo tests ran
2023-08-07T13:05:26.2978450Z (dda,BL9_100monres)=>[0m
2023-08-07T13:05:26.2978674Z (dda,BL9_100monres)=>
2023-08-07T13:05:26.2978971Z (dda,BL9_100monres)=>13:05:26.071 INFO : Finished in 0.00115333 seconds
2023-08-07T13:05:26.2979308Z (dda,BL9_100monres)=>13:05:26.072 INFO : Randomness seeded to: 1691413510
2023-08-07T13:05:26.2980115Z (dda,BL9_100monres)=>
2023-08-07T13:05:26.2980468Z (dda,BL9_100monres)=>13:05:26.072 INFO : Treating result as failure due to error logged during initialization.
