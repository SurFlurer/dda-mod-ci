2023-07-28T02:24:24.0395203Z (dda,secronom)=>
2023-07-28T02:24:24.0395809Z (dda,secronom)=>02:24:21.454 INFO : Randomness seeded to: 1690511061
2023-07-28T02:24:24.0396541Z (dda,secronom)=>02:24:21.454 WARNING : opendir [lang/mo/] failed with "No such file or directory".
2023-07-28T02:24:24.0397284Z (dda,secronom)=>02:24:21.457 INFO : SDL render devices: software, opengl, opengles2
2023-07-28T02:24:24.0398473Z (dda,secronom)=>02:24:21.457 INFO : [options] C locale set to C
2023-07-28T02:24:24.0399092Z (dda,secronom)=>02:24:21.457 INFO : [options] C++ locale set to C
2023-07-28T02:24:24.0400452Z (dda,secronom)=>02:24:23.705 ERROR : (error message will follow backtrace)
2023-07-28T02:24:24.0401312Z (dda,secronom)=>    ./tests/cata_test(debug_write_backtrace(std::ostream&)+0x23) [0x1f6a77e]
2023-07-28T02:24:24.0402140Z (dda,secronom)=>    ./tests/cata_test(DebugLog(DebugLevel, DebugClass)+0x278) [0x1f69d0c]
2023-07-28T02:24:24.0403582Z (dda,secronom)=>    ./tests/cata_test(realDebugmsg(char const*, char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa0) [0x1f695e6]
2023-07-28T02:24:24.0404878Z (dda,secronom)=>    ./tests/cata_test(JsonObject::error_skipped_members(std::vector<unsigned long, std::allocator<unsigned long> > const&) const+0x2bc) [0x209e8d4]
2023-07-28T02:24:24.0405885Z (dda,secronom)=>    ./tests/cata_test(JsonObject::report_unvisited() const+0x32c) [0x209e5c6]
2023-07-28T02:24:24.0406687Z (dda,secronom)=>    ./tests/cata_test(JsonObject::~JsonObject()+0x3d) [0x1725eb3]
2023-07-28T02:24:24.0410210Z (dda,secronom)=>    ./tests/cata_test(Item_factory::set_use_methods_from_json(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, use_function, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, use_function> > >&, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >&)+0x5e9) [0x22cccd5]
2023-07-28T02:24:24.0413293Z (dda,secronom)=>    ./tests/cata_test(Item_factory::load_basic_info(JsonObject const&, itype&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2a73) [0x22c0241]
2023-07-28T02:24:24.0414754Z (dda,secronom)=>    ./tests/cata_test(Item_factory::load_tool(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5f) [0x22c62eb]
2023-07-28T02:24:24.0416779Z (dda,secronom)=>    ./tests/cata_test(DynamicDataLoader::load_object(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cata_path const&, cata_path const&)+0xae) [0x21c417c]
2023-07-28T02:24:24.0418508Z (dda,secronom)=>    ./tests/cata_test(DynamicDataLoader::load_all_from_json(JsonValue const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, loading_ui&, cata_path const&, cata_path const&)+0xdf) [0x21c4de1]
2023-07-28T02:24:24.0420147Z (dda,secronom)=>    ./tests/cata_test(DynamicDataLoader::load_data_from_path(cata_path const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, loading_ui&)+0x130) [0x21c4bec]
2023-07-28T02:24:24.0421889Z (dda,secronom)=>    ./tests/cata_test(game::load_packs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<string_id<MOD_INFORMATION>, std::allocator<string_id<MOD_INFORMATION> > > const&, loading_ui&)+0x166) [0x20b6c94]
2023-07-28T02:24:24.0423153Z (dda,secronom)=>    ./tests/cata_test(game::load_world_modfiles(loading_ui&)+0x2f8) [0x20a4856]
2023-07-28T02:24:24.0423998Z (dda,secronom)=>    ./tests/cata_test(main+0xf9b) [0x1b318fa]
2023-07-28T02:24:24.0425268Z (dda,secronom)=>    /lib/x86_64-linux-gnu/libc.so.6(+0x29d90) [0x7fd4ec749d90]
2023-07-28T02:24:24.0426317Z (dda,secronom)=>    /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0x80) [0x7fd4ec749e40]
2023-07-28T02:24:24.0427405Z (dda,secronom)=>    ./tests/cata_test(_start+0x25) [0x15017a5]
2023-07-28T02:24:24.0427986Z (dda,secronom)=>
2023-07-28T02:24:24.0428915Z (dda,secronom)=>    Attempting to repeat stack trace using debug symbolsâ€¦
2023-07-28T02:24:24.0429507Z (dda,secronom)=>    debug_write_backtrace(std::ostream&)
2023-07-28T02:24:24.0430003Z (dda,secronom)=>    ??:?
2023-07-28T02:24:24.0430515Z (dda,secronom)=>    DebugLog(DebugLevel, DebugClass)
2023-07-28T02:24:24.0430998Z (dda,secronom)=>    ??:?
2023-07-28T02:24:24.1539584Z (dda,secronom)=>    realDebugmsg(char const*, char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-07-28T02:24:24.1541925Z (dda,secronom)=>    ??:?
2023-07-28T02:24:24.1542669Z (dda,secronom)=>    JsonObject::error_skipped_members(std::vector<unsigned long, std::allocator<unsigned long> > const&) const
2023-07-28T02:24:24.1543807Z (dda,secronom)=>    ??:?
2023-07-28T02:24:24.1544317Z (dda,secronom)=>    JsonObject::report_unvisited() const
2023-07-28T02:24:24.1544848Z (dda,secronom)=>    ??:?
2023-07-28T02:24:24.1545339Z (dda,secronom)=>    JsonObject::~JsonObject()
2023-07-28T02:24:24.1546212Z (dda,secronom)=>    ??:?
2023-07-28T02:24:24.1548710Z (dda,secronom)=>    Item_factory::set_use_methods_from_json(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, use_function, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, use_function> > >&, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, int> > >&)
2023-07-28T02:24:24.1551940Z (dda,secronom)=>    ??:?
2023-07-28T02:24:24.1552714Z (dda,secronom)=>    Item_factory::load_basic_info(JsonObject const&, itype&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-07-28T02:24:24.1553360Z (dda,secronom)=>    ??:?
2023-07-28T02:24:24.1554078Z (dda,secronom)=>    Item_factory::load_tool(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-07-28T02:24:24.1555113Z (dda,secronom)=>    ??:?
2023-07-28T02:24:24.1556017Z (dda,secronom)=>    DynamicDataLoader::load_object(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cata_path const&, cata_path const&)
2023-07-28T02:24:24.1557701Z (dda,secronom)=>    ??:?
2023-07-28T02:24:24.1558615Z (dda,secronom)=>    DynamicDataLoader::load_all_from_json(JsonValue const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, loading_ui&, cata_path const&, cata_path const&)
2023-07-28T02:24:24.1559317Z (dda,secronom)=>    ??:?
2023-07-28T02:24:24.1560088Z (dda,secronom)=>    DynamicDataLoader::load_data_from_path(cata_path const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, loading_ui&)
2023-07-28T02:24:24.1561074Z (dda,secronom)=>    ??:?
2023-07-28T02:24:24.1561978Z (dda,secronom)=>    game::load_packs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<string_id<MOD_INFORMATION>, std::allocator<string_id<MOD_INFORMATION> > > const&, loading_ui&)
2023-07-28T02:24:24.1562991Z (dda,secronom)=>    ??:?
2023-07-28T02:24:24.1563846Z (dda,secronom)=>    game::load_world_modfiles(loading_ui&)
2023-07-28T02:24:24.1564392Z (dda,secronom)=>    ??:?
2023-07-28T02:24:24.1565578Z (dda,secronom)=>    main
2023-07-28T02:24:24.1565908Z (dda,secronom)=>    ??:?
2023-07-28T02:24:24.1566240Z (dda,secronom)=>    ??
2023-07-28T02:24:24.1566592Z (dda,secronom)=>    ??:0
2023-07-28T02:24:24.1566902Z (dda,secronom)=>    ??
2023-07-28T02:24:24.1567520Z (dda,secronom)=>    ??:0
2023-07-28T02:24:24.1567859Z (dda,secronom)=>    _start
2023-07-28T02:24:24.1568201Z (dda,secronom)=>    ??:?
2023-07-28T02:24:24.1568541Z (dda,secronom)=>Backtrace emission took 1 seconds.
2023-07-28T02:24:24.1569670Z (dda,secronom)=>(continued from above) ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-28T02:24:24.1573038Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "no_deactivate_msg" in JSON data[0m
2023-07-28T02:24:24.1575104Z (dda,secronom)=>02:24:24.153 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-28T02:24:24.1577121Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "sound_msg" in JSON data[0m
2023-07-28T02:24:24.1579565Z (dda,secronom)=>02:24:24.154 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-28T02:24:24.1581876Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "sound_volume" in JSON data[0m
2023-07-28T02:24:24.1585770Z (dda,secronom)=>02:24:24.154 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-28T02:24:24.1588043Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "no_deactivate_msg" in JSON data[0m
2023-07-28T02:24:24.1589579Z (dda,secronom)=>02:24:24.155 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-28T02:24:24.1591559Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "sound_msg" in JSON data[0m
2023-07-28T02:24:24.1592980Z (dda,secronom)=>02:24:24.155 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-28T02:24:24.1594911Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "sound_volume" in JSON data[0m
2023-07-28T02:24:24.1596277Z (dda,secronom)=>02:24:24.156 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-28T02:24:24.1598320Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "no_deactivate_msg" in JSON data[0m
2023-07-28T02:24:24.1599972Z (dda,secronom)=>02:24:24.156 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-28T02:24:24.1601932Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "sound_msg" in JSON data[0m
2023-07-28T02:24:24.1603690Z (dda,secronom)=>02:24:24.156 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-28T02:24:24.2208976Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "sound_volume" in JSON data[0m
2023-07-28T02:24:24.2211915Z (dda,secronom)=>02:24:24.157 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-28T02:24:24.2214846Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "no_deactivate_msg" in JSON data[0m
2023-07-28T02:24:24.2217078Z (dda,secronom)=>02:24:24.157 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-28T02:24:24.2222994Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "sound_msg" in JSON data[0m
2023-07-28T02:24:24.2224802Z (dda,secronom)=>02:24:24.158 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-28T02:24:24.2227032Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "sound_volume" in JSON data[0m
2023-07-28T02:24:24.2228687Z (dda,secronom)=>02:24:24.158 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-28T02:24:24.2231942Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "no_deactivate_msg" in JSON data[0m
2023-07-28T02:24:24.2233558Z (dda,secronom)=>02:24:24.159 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-28T02:24:24.2235673Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "sound_msg" in JSON data[0m
2023-07-28T02:24:24.2237207Z (dda,secronom)=>02:24:24.159 ERROR : src/flexbuffer_json.cpp:341 [void JsonObject::error_skipped_members(const std::vector<size_t> &) const] (json-error)
2023-07-28T02:24:24.2239562Z ##[error](dda,secronom)=>[0m[0;36mInvalid or misplaced field name "sound_volume" in JSON data[0m
2023-07-28T02:24:24.2241114Z (dda,secronom)=>02:24:24.217 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_flesh_initial specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-28T02:24:24.2821828Z (dda,secronom)=>02:24:24.218 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_veinstalk_initial specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-28T02:24:24.2825875Z (dda,secronom)=>02:24:24.220 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_insect_saddler specifies more than one attack of (sub)type leap, ignoring all but the last
2023-07-28T02:24:24.2828137Z (dda,secronom)=>02:24:24.221 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_insect_saddler_brute specifies more than one attack of (sub)type leap, ignoring all but the last
2023-07-28T02:24:24.2830179Z (dda,secronom)=>02:24:24.221 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_insect_saddler_scout specifies more than one attack of (sub)type leap, ignoring all but the last
2023-07-28T02:24:24.2832416Z (dda,secronom)=>02:24:24.231 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_zombie_fleshknot_weak specifies more than one attack of (sub)type gun, ignoring all but the last
2023-07-28T02:24:24.2834865Z (dda,secronom)=>02:24:24.231 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_zombie_fleshknot_mode specifies more than one attack of (sub)type gun, ignoring all but the last
2023-07-28T02:24:24.2836893Z (dda,secronom)=>02:24:24.232 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_zombie_fleshknot_stro specifies more than one attack of (sub)type gun, ignoring all but the last
2023-07-28T02:24:24.2838832Z (dda,secronom)=>02:24:24.232 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_zombie_fleshknot_vstro specifies more than one attack of (sub)type gun, ignoring all but the last
2023-07-28T02:24:24.2840963Z (dda,secronom)=>02:24:24.257 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_centipede_mom specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-28T02:24:24.2843353Z (dda,secronom)=>02:24:24.258 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_spider_cellar_mega specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-28T02:24:24.2845436Z (dda,secronom)=>02:24:24.271 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_zombie_wretch specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-28T02:24:24.2847519Z (dda,secronom)=>02:24:24.274 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_boomer_glutton specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-28T02:24:24.2849696Z (dda,secronom)=>02:24:24.274 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_boomer_claymore specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-28T02:24:24.2851701Z (dda,secronom)=>02:24:24.275 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_zombie_phase_skulker specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-28T02:24:24.2854064Z (dda,secronom)=>02:24:24.275 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_zombie_phase_shrike specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-28T02:24:24.2856111Z (dda,secronom)=>02:24:24.279 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_frog_mother specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-28T02:24:24.2858181Z (dda,secronom)=>02:24:24.281 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_zombie_crawler_pupa specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-28T02:24:37.9088614Z (dda,secronom)=>02:24:24.282 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_zombie_pupa specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-28T02:24:37.9090119Z (dda,secronom)=>02:24:24.282 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_hulk_pupa specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-28T02:24:37.9091395Z (dda,secronom)=>02:24:24.282 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_zombie_pupa_shady specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-28T02:24:37.9118381Z (dda,secronom)=>02:24:26.718 INFO : src/mod_tracker.h:68: Tried check if 'FakeSpecial_s_gas' had a duplicate, but type 'overmap_special' does not track object sources
2023-07-28T02:24:37.9119411Z (dda,secronom)=>02:24:30.297 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_sflesh_brute_pupa specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-28T02:24:37.9120920Z (dda,secronom)=>02:24:36.339 ERROR : src/mapgen.cpp:1212 [virtual void mapgen_value<string_id<VehicleGroup>>::id_source::check(const std::string &, const mapgen_parameters &) const [Id = string_id<VehicleGroup>]] mapgen 'nested mapgen mx_secro_ssf_nested' uses invalid entry 'secro_veh_sscarrier'
2023-07-28T02:24:37.9121928Z (dda,secronom)=>02:24:36.339 ERROR : src/vehicle_group.cpp:40 [const VehicleGroup &string_id<VehicleGroup>::obj() const [T = VehicleGroup]] invalid vehicle group id secro_veh_sscarrier
2023-07-28T02:24:37.9124091Z (dda,secronom)=>02:24:36.339 ERROR : src/mapgen.cpp:2657 [virtual void jmapgen_vehicle::check(const std::string &, const mapgen_parameters &, const jmapgen_int &, const jmapgen_int &) const] In nested mapgen mx_secro_ssf_nested, vehicle placement at x:[12,12], y:[10,10]: potential placement of vehicle out of bounds.  At rotation 270 the vehicle [vgroup_id ; vproto_id ] extends too far west, reaching coordinate x = -2147483636 (should be at least 0)
2023-07-28T02:24:37.9125824Z (dda,secronom)=>02:24:36.339 ERROR : src/mapgen.cpp:1212 [virtual void mapgen_value<string_id<VehicleGroup>>::id_source::check(const std::string &, const mapgen_parameters &) const [Id = string_id<VehicleGroup>]] mapgen 'nested mapgen mx_secro_ssb_nested' uses invalid entry 'secro_veh_sscarrier'
2023-07-28T02:24:37.9126822Z (dda,secronom)=>02:24:36.339 ERROR : src/vehicle_group.cpp:40 [const VehicleGroup &string_id<VehicleGroup>::obj() const [T = VehicleGroup]] invalid vehicle group id secro_veh_sscarrier
2023-07-28T02:24:37.9129020Z (dda,secronom)=>02:24:36.339 ERROR : src/mapgen.cpp:2657 [virtual void jmapgen_vehicle::check(const std::string &, const mapgen_parameters &, const jmapgen_int &, const jmapgen_int &) const] In nested mapgen mx_secro_ssb_nested, vehicle placement at x:[12,12], y:[10,10]: potential placement of vehicle out of bounds.  At rotation 270 the vehicle [vgroup_id ; vproto_id ] extends too far west, reaching coordinate x = -2147483636 (should be at least 0)
2023-07-28T02:24:37.9129990Z (dda,secronom)=>02:24:37.620 INFO : Game data loaded, running Catch2 session:
2023-07-28T02:24:37.9130467Z (dda,secronom)=>[1;33mFilters: ~*
2023-07-28T02:24:37.9130907Z (dda,secronom)=>[0mNo test cases matched '~*'
2023-07-28T02:24:37.9131452Z (dda,secronom)=>[1;33m===============================================================================[0m
2023-07-28T02:24:37.9131891Z (dda,secronom)=>[1;33mNo tests ran
2023-07-28T02:24:37.9132248Z (dda,secronom)=>[0m
2023-07-28T02:24:37.9132519Z (dda,secronom)=>
2023-07-28T02:24:37.9132884Z (dda,secronom)=>02:24:37.622 INFO : Finished in 0.00145863 seconds
2023-07-28T02:24:37.9133311Z (dda,secronom)=>02:24:37.622 INFO : Randomness seeded to: 1690511061
2023-07-28T02:24:37.9133638Z (dda,secronom)=>
2023-07-28T02:24:37.9134097Z (dda,secronom)=>02:24:37.622 INFO : Treating result as failure due to error logged during initialization.
