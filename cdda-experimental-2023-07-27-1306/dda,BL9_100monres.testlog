2023-07-28T02:25:41.4965550Z (dda,BL9_100monres)=>
2023-07-28T02:25:41.4966396Z (dda,BL9_100monres)=>02:25:38.828 INFO : Randomness seeded to: 1690511138
2023-07-28T02:25:41.4967633Z (dda,BL9_100monres)=>02:25:38.828 WARNING : opendir [lang/mo/] failed with "No such file or directory".
2023-07-28T02:25:41.4968462Z (dda,BL9_100monres)=>02:25:38.830 INFO : SDL render devices: software, opengl, opengles2
2023-07-28T02:25:41.4969217Z (dda,BL9_100monres)=>02:25:38.831 INFO : [options] C locale set to C
2023-07-28T02:25:41.5062913Z (dda,BL9_100monres)=>02:25:38.831 INFO : [options] C++ locale set to C
2023-07-28T02:25:41.5063454Z (dda,BL9_100monres)=>02:25:41.164 ERROR : (error message will follow backtrace)
2023-07-28T02:25:41.5064117Z (dda,BL9_100monres)=>    ./tests/cata_test(debug_write_backtrace(std::ostream&)+0x23) [0x1f6a77e]
2023-07-28T02:25:41.5064745Z (dda,BL9_100monres)=>    ./tests/cata_test(DebugLog(DebugLevel, DebugClass)+0x278) [0x1f69d0c]
2023-07-28T02:25:41.5065610Z (dda,BL9_100monres)=>    ./tests/cata_test(realDebugmsg(char const*, char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa0) [0x1f695e6]
2023-07-28T02:25:41.5066616Z (dda,BL9_100monres)=>    ./tests/cata_test(mtype::add_special_attack(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xfa) [0x26a320a]
2023-07-28T02:25:41.5067724Z (dda,BL9_100monres)=>    ./tests/cata_test(mtype::add_special_attacks(JsonObject const&, std::basic_string_view<char, std::char_traits<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x155) [0x26a1961]
2023-07-28T02:25:41.5069208Z (dda,BL9_100monres)=>    ./tests/cata_test(mtype::load(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3aa8) [0x269daee]
2023-07-28T02:25:41.5070172Z (dda,BL9_100monres)=>    ./tests/cata_test(generic_factory<mtype>::load(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x119) [0x26a625b]
2023-07-28T02:25:41.5071267Z (dda,BL9_100monres)=>    ./tests/cata_test(DynamicDataLoader::load_object(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cata_path const&, cata_path const&)+0xae) [0x21c417c]
2023-07-28T02:25:41.5072437Z (dda,BL9_100monres)=>    ./tests/cata_test(DynamicDataLoader::load_all_from_json(JsonValue const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, loading_ui&, cata_path const&, cata_path const&)+0xdf) [0x21c4de1]
2023-07-28T02:25:41.5073564Z (dda,BL9_100monres)=>    ./tests/cata_test(DynamicDataLoader::load_data_from_path(cata_path const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, loading_ui&)+0x130) [0x21c4bec]
2023-07-28T02:25:41.5074741Z (dda,BL9_100monres)=>    ./tests/cata_test(game::load_packs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<string_id<MOD_INFORMATION>, std::allocator<string_id<MOD_INFORMATION> > > const&, loading_ui&)+0x166) [0x20b6c94]
2023-07-28T02:25:41.5075594Z (dda,BL9_100monres)=>    ./tests/cata_test(game::load_world_modfiles(loading_ui&)+0x2f8) [0x20a4856]
2023-07-28T02:25:41.5076140Z (dda,BL9_100monres)=>    ./tests/cata_test(main+0xf9b) [0x1b318fa]
2023-07-28T02:25:41.5076990Z (dda,BL9_100monres)=>    /lib/x86_64-linux-gnu/libc.so.6(+0x29d90) [0x7f9a6b8aed90]
2023-07-28T02:25:41.5077704Z (dda,BL9_100monres)=>    /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0x80) [0x7f9a6b8aee40]
2023-07-28T02:25:41.5078236Z (dda,BL9_100monres)=>    ./tests/cata_test(_start+0x25) [0x15017a5]
2023-07-28T02:25:41.5078594Z (dda,BL9_100monres)=>
2023-07-28T02:25:41.5079130Z (dda,BL9_100monres)=>    Attempting to repeat stack trace using debug symbolsâ€¦
2023-07-28T02:25:41.5079660Z (dda,BL9_100monres)=>    debug_write_backtrace(std::ostream&)
2023-07-28T02:25:41.5080072Z (dda,BL9_100monres)=>    ??:?
2023-07-28T02:25:41.5080494Z (dda,BL9_100monres)=>    DebugLog(DebugLevel, DebugClass)
2023-07-28T02:25:41.5080896Z (dda,BL9_100monres)=>    ??:?
2023-07-28T02:25:41.5081738Z (dda,BL9_100monres)=>    realDebugmsg(char const*, char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-07-28T02:25:41.5082274Z (dda,BL9_100monres)=>    ??:?
2023-07-28T02:25:41.5083073Z (dda,BL9_100monres)=>    mtype::add_special_attack(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-07-28T02:25:41.5083612Z (dda,BL9_100monres)=>    ??:?
2023-07-28T02:25:41.5084375Z (dda,BL9_100monres)=>    mtype::add_special_attacks(JsonObject const&, std::basic_string_view<char, std::char_traits<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-07-28T02:25:41.5084958Z (dda,BL9_100monres)=>    ??:?
2023-07-28T02:25:41.6103925Z (dda,BL9_100monres)=>    mtype::load(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-07-28T02:25:41.6105532Z (dda,BL9_100monres)=>    ??:?
2023-07-28T02:25:41.6107084Z (dda,BL9_100monres)=>    generic_factory<mtype>::load(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
2023-07-28T02:25:41.6108351Z (dda,BL9_100monres)=>    ??:?
2023-07-28T02:25:41.6109897Z (dda,BL9_100monres)=>    DynamicDataLoader::load_object(JsonObject const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cata_path const&, cata_path const&)
2023-07-28T02:25:41.6110886Z (dda,BL9_100monres)=>    ??:?
2023-07-28T02:25:41.6111667Z (dda,BL9_100monres)=>    DynamicDataLoader::load_all_from_json(JsonValue const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, loading_ui&, cata_path const&, cata_path const&)
2023-07-28T02:25:41.6112321Z (dda,BL9_100monres)=>    ??:?
2023-07-28T02:25:41.6113028Z (dda,BL9_100monres)=>    DynamicDataLoader::load_data_from_path(cata_path const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, loading_ui&)
2023-07-28T02:25:41.6113602Z (dda,BL9_100monres)=>    ??:?
2023-07-28T02:25:41.6114406Z (dda,BL9_100monres)=>    game::load_packs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<string_id<MOD_INFORMATION>, std::allocator<string_id<MOD_INFORMATION> > > const&, loading_ui&)
2023-07-28T02:25:41.6115157Z (dda,BL9_100monres)=>    ??:?
2023-07-28T02:25:41.6115602Z (dda,BL9_100monres)=>    game::load_world_modfiles(loading_ui&)
2023-07-28T02:25:41.6116028Z (dda,BL9_100monres)=>    ??:?
2023-07-28T02:25:41.6116366Z (dda,BL9_100monres)=>    main
2023-07-28T02:25:41.6116721Z (dda,BL9_100monres)=>    ??:?
2023-07-28T02:25:41.6117061Z (dda,BL9_100monres)=>    ??
2023-07-28T02:25:41.6117410Z (dda,BL9_100monres)=>    ??:0
2023-07-28T02:25:41.6117751Z (dda,BL9_100monres)=>    ??
2023-07-28T02:25:41.6118118Z (dda,BL9_100monres)=>    ??:0
2023-07-28T02:25:41.6118458Z (dda,BL9_100monres)=>    _start
2023-07-28T02:25:41.6118813Z (dda,BL9_100monres)=>    ??:?
2023-07-28T02:25:41.6119186Z (dda,BL9_100monres)=>Backtrace emission took 0 seconds.
2023-07-28T02:25:41.6120114Z (dda,BL9_100monres)=>(continued from above) ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_inhrav_4 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:41.6121250Z (dda,BL9_100monres)=>02:25:41.606 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_inhrav_5 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:41.6122351Z (dda,BL9_100monres)=>02:25:41.606 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_yengn_4 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:41.6123770Z (dda,BL9_100monres)=>02:25:41.607 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_yengn_5 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:41.6124865Z (dda,BL9_100monres)=>02:25:41.607 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_ulniv_4 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:41.6125945Z (dda,BL9_100monres)=>02:25:41.607 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_ulniv_5 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:41.6127005Z (dda,BL9_100monres)=>02:25:41.607 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_ezron_4 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:41.6128075Z (dda,BL9_100monres)=>02:25:41.607 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_ezron_5 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:41.6129160Z (dda,BL9_100monres)=>02:25:41.608 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_tavrav_5 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:41.6230841Z (dda,BL9_100monres)=>02:25:41.610 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_argan_6 specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-28T02:25:41.6231994Z (dda,BL9_100monres)=>02:25:41.610 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_wanzel_6 specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-28T02:25:41.6233525Z (dda,BL9_100monres)=>02:25:41.613 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_davran_6 specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-28T02:25:41.6234824Z (dda,BL9_100monres)=>02:25:41.614 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_salden_6 specifies more than one attack of (sub)type spell, ignoring all but the last
2023-07-28T02:25:41.6236428Z (dda,BL9_100monres)=>02:25:41.617 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_mutant_2 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:41.6237543Z (dda,BL9_100monres)=>02:25:41.619 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_mutant_evo_2 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:41.6239158Z (dda,BL9_100monres)=>02:25:41.621 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_assassin specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:41.6240753Z (dda,BL9_100monres)=>02:25:41.621 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_assassin specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:41.6241841Z (dda,BL9_100monres)=>02:25:41.622 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_twisted_one specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:41.6243379Z (dda,BL9_100monres)=>[ Previous repeated 2 times ]
2023-07-28T02:25:41.6244523Z (dda,BL9_100monres)=>02:25:41.622 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_twisted_one specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:41.6245640Z (dda,BL9_100monres)=>02:25:41.622 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_inhrav_6 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:41.6246734Z (dda,BL9_100monres)=>02:25:41.622 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_yengn_6 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:41.6248410Z (dda,BL9_100monres)=>02:25:41.622 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_ulniv_6 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:41.6249745Z (dda,BL9_100monres)=>02:25:41.622 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_ezron_6 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:41.6251095Z (dda,BL9_100monres)=>02:25:41.622 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_1 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:41.6251941Z (dda,BL9_100monres)=>[ Previous repeated 2 times ]
2023-07-28T02:25:41.6252784Z (dda,BL9_100monres)=>02:25:41.622 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_1 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:49.3947191Z (dda,BL9_100monres)=>02:25:41.622 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_regen specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:49.3951659Z (dda,BL9_100monres)=>02:25:41.623 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_regen_spiky specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:49.3953643Z (dda,BL9_100monres)=>02:25:41.623 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_regen_spiky specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:49.3955583Z (dda,BL9_100monres)=>02:25:41.623 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_vile_one specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:49.3957536Z (dda,BL9_100monres)=>02:25:41.623 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_2 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:49.3958717Z (dda,BL9_100monres)=>[ Previous repeated 2 times ]
2023-07-28T02:25:49.3960237Z (dda,BL9_100monres)=>02:25:41.623 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_2 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:49.3962176Z (dda,BL9_100monres)=>02:25:41.624 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_3 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:49.3964270Z (dda,BL9_100monres)=>[ Previous repeated 2 times ]
2023-07-28T02:25:49.3965763Z (dda,BL9_100monres)=>02:25:41.624 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_3 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:49.3967732Z (dda,BL9_100monres)=>02:25:41.624 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_4 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:49.3968928Z (dda,BL9_100monres)=>[ Previous repeated 2 times ]
2023-07-28T02:25:49.3970366Z (dda,BL9_100monres)=>02:25:41.624 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_4 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:49.3972304Z (dda,BL9_100monres)=>02:25:41.624 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_5 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:49.3973466Z (dda,BL9_100monres)=>[ Previous repeated 2 times ]
2023-07-28T02:25:49.3974938Z (dda,BL9_100monres)=>02:25:41.624 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_supersoldier_5 specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:49.3977121Z (dda,BL9_100monres)=>02:25:41.625 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_repto specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:49.3979033Z (dda,BL9_100monres)=>02:25:41.625 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_repto_evo specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:49.3980960Z (dda,BL9_100monres)=>02:25:41.625 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_scrawler_evo specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:49.3982921Z (dda,BL9_100monres)=>02:25:41.625 ERROR : src/monstergenerator.cpp:1390 [void mtype::add_special_attack(const JsonObject &, const std::string &)] mon_BL9_scrawler_evo specifies more than one attack of (sub)type monster_attack, ignoring all but the last
2023-07-28T02:25:56.9048263Z (dda,BL9_100monres)=>02:25:44.177 INFO : src/mod_tracker.h:68: Tried check if 'FakeSpecial_s_gas' had a duplicate, but type 'overmap_special' does not track object sources
2023-07-28T02:25:56.9049556Z (dda,BL9_100monres)=>02:25:49.394 ERROR : src/item.cpp:1582 [ret_val<void> item::put_in(const item &, item_pocket::pocket_type, const bool)] tried to put an item (38_special) count (0) in a container (BL9_magnum_mk3) that cannot contain it: pocket unacceptable because item is not the correct ammo type
2023-07-28T02:25:56.9050918Z (dda,BL9_100monres)=>02:25:49.420 ERROR : src/item.cpp:1582 [ret_val<void> item::put_in(const item &, item_pocket::pocket_type, const bool)] tried to put an item (38_special) count (0) in a container (BL9_magnum) that cannot contain it: pocket unacceptable because item is not the correct ammo type
2023-07-28T02:25:56.9052268Z (dda,BL9_100monres)=>02:25:50.034 ERROR : src/item.cpp:1582 [ret_val<void> item::put_in(const item &, item_pocket::pocket_type, const bool)] tried to put an item (38_special) count (0) in a container (BL9_magnum_mk2) that cannot contain it: pocket unacceptable because item is not the correct ammo type
2023-07-28T02:25:56.9053037Z (dda,BL9_100monres)=>02:25:56.610 INFO : Game data loaded, running Catch2 session:
2023-07-28T02:25:56.9054252Z (dda,BL9_100monres)=>[1;33mFilters: ~*
2023-07-28T02:25:56.9054715Z (dda,BL9_100monres)=>[0mNo test cases matched '~*'
2023-07-28T02:25:56.9055287Z (dda,BL9_100monres)=>[1;33m===============================================================================[0m
2023-07-28T02:25:56.9055729Z (dda,BL9_100monres)=>[1;33mNo tests ran
2023-07-28T02:25:56.9056105Z (dda,BL9_100monres)=>[0m
2023-07-28T02:25:56.9056379Z (dda,BL9_100monres)=>
2023-07-28T02:25:56.9056764Z (dda,BL9_100monres)=>02:25:56.612 INFO : Finished in 0.00160823 seconds
2023-07-28T02:25:56.9057204Z (dda,BL9_100monres)=>02:25:56.612 INFO : Randomness seeded to: 1690511138
2023-07-28T02:25:56.9057535Z (dda,BL9_100monres)=>
2023-07-28T02:25:56.9057996Z (dda,BL9_100monres)=>02:25:56.612 INFO : Treating result as failure due to error logged during initialization.
